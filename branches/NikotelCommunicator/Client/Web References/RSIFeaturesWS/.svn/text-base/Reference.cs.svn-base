//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.1433.
// 
#pragma warning disable 1591

namespace Remwave.Client.RSIFeaturesWS {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="RSIBinding", Namespace="urn:RSI")]
    public partial class RSIServiceWse : Microsoft.Web.Services3.WebServicesClientProtocol {
        
        private System.Threading.SendOrPostCallback serviceBillingRecordsOperationCompleted;
        
        private System.Threading.SendOrPostCallback serviceCallNowOperationCompleted;
        
        private System.Threading.SendOrPostCallback serviceCallNowRatesOperationCompleted;
        
        private System.Threading.SendOrPostCallback serviceCallNowRatesVerOperationCompleted;
        
        private System.Threading.SendOrPostCallback servicePhonebookGetOperationCompleted;
        
        private System.Threading.SendOrPostCallback servicePhonebookPutOperationCompleted;
        
        private System.Threading.SendOrPostCallback servicePrepaidAmountOperationCompleted;
        
        private System.Threading.SendOrPostCallback utilsSearchUserOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public RSIServiceWse() {
            this.Url = "http://api.nikotel.com/soap/nikotel-2.0/";
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event serviceBillingRecordsCompletedEventHandler serviceBillingRecordsCompleted;
        
        /// <remarks/>
        public event serviceCallNowCompletedEventHandler serviceCallNowCompleted;
        
        /// <remarks/>
        public event serviceCallNowRatesCompletedEventHandler serviceCallNowRatesCompleted;
        
        /// <remarks/>
        public event serviceCallNowRatesVerCompletedEventHandler serviceCallNowRatesVerCompleted;
        
        /// <remarks/>
        public event servicePhonebookGetCompletedEventHandler servicePhonebookGetCompleted;
        
        /// <remarks/>
        public event servicePhonebookPutCompletedEventHandler servicePhonebookPutCompleted;
        
        /// <remarks/>
        public event servicePrepaidAmountCompletedEventHandler servicePrepaidAmountCompleted;
        
        /// <remarks/>
        public event utilsSearchUserCompletedEventHandler utilsSearchUserCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:RSIAction", RequestNamespace="urn:RSI", ResponseNamespace="urn:RSI")]
        [return: System.Xml.Serialization.SoapElementAttribute("serviceBillingRecordsReturn")]
        public string[] serviceBillingRecords(string username, string password, string timezone) {
            object[] results = this.Invoke("serviceBillingRecords", new object[] {
                        username,
                        password,
                        timezone});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void serviceBillingRecordsAsync(string username, string password, string timezone) {
            this.serviceBillingRecordsAsync(username, password, timezone, null);
        }
        
        /// <remarks/>
        public void serviceBillingRecordsAsync(string username, string password, string timezone, object userState) {
            if ((this.serviceBillingRecordsOperationCompleted == null)) {
                this.serviceBillingRecordsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnserviceBillingRecordsOperationCompleted);
            }
            this.InvokeAsync("serviceBillingRecords", new object[] {
                        username,
                        password,
                        timezone}, this.serviceBillingRecordsOperationCompleted, userState);
        }
        
        private void OnserviceBillingRecordsOperationCompleted(object arg) {
            if ((this.serviceBillingRecordsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.serviceBillingRecordsCompleted(this, new serviceBillingRecordsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:RSIAction", RequestNamespace="urn:RSI", ResponseNamespace="urn:RSI")]
        [return: System.Xml.Serialization.SoapElementAttribute("serviceCallNowReturn", DataType="integer")]
        public string serviceCallNow(string username, string password, string callfrom, string callto) {
            object[] results = this.Invoke("serviceCallNow", new object[] {
                        username,
                        password,
                        callfrom,
                        callto});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void serviceCallNowAsync(string username, string password, string callfrom, string callto) {
            this.serviceCallNowAsync(username, password, callfrom, callto, null);
        }
        
        /// <remarks/>
        public void serviceCallNowAsync(string username, string password, string callfrom, string callto, object userState) {
            if ((this.serviceCallNowOperationCompleted == null)) {
                this.serviceCallNowOperationCompleted = new System.Threading.SendOrPostCallback(this.OnserviceCallNowOperationCompleted);
            }
            this.InvokeAsync("serviceCallNow", new object[] {
                        username,
                        password,
                        callfrom,
                        callto}, this.serviceCallNowOperationCompleted, userState);
        }
        
        private void OnserviceCallNowOperationCompleted(object arg) {
            if ((this.serviceCallNowCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.serviceCallNowCompleted(this, new serviceCallNowCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:RSIAction", RequestNamespace="urn:RSI", ResponseNamespace="urn:RSI")]
        [return: System.Xml.Serialization.SoapElementAttribute("serviceCallNowRatesReturn")]
        public string[] serviceCallNowRates(string secret) {
            object[] results = this.Invoke("serviceCallNowRates", new object[] {
                        secret});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void serviceCallNowRatesAsync(string secret) {
            this.serviceCallNowRatesAsync(secret, null);
        }
        
        /// <remarks/>
        public void serviceCallNowRatesAsync(string secret, object userState) {
            if ((this.serviceCallNowRatesOperationCompleted == null)) {
                this.serviceCallNowRatesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnserviceCallNowRatesOperationCompleted);
            }
            this.InvokeAsync("serviceCallNowRates", new object[] {
                        secret}, this.serviceCallNowRatesOperationCompleted, userState);
        }
        
        private void OnserviceCallNowRatesOperationCompleted(object arg) {
            if ((this.serviceCallNowRatesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.serviceCallNowRatesCompleted(this, new serviceCallNowRatesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:RSIAction", RequestNamespace="urn:RSI", ResponseNamespace="urn:RSI")]
        [return: System.Xml.Serialization.SoapElementAttribute("serviceCallNowRatesVerReturn")]
        public string serviceCallNowRatesVer(string secret1) {
            object[] results = this.Invoke("serviceCallNowRatesVer", new object[] {
                        secret1});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void serviceCallNowRatesVerAsync(string secret1) {
            this.serviceCallNowRatesVerAsync(secret1, null);
        }
        
        /// <remarks/>
        public void serviceCallNowRatesVerAsync(string secret1, object userState) {
            if ((this.serviceCallNowRatesVerOperationCompleted == null)) {
                this.serviceCallNowRatesVerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnserviceCallNowRatesVerOperationCompleted);
            }
            this.InvokeAsync("serviceCallNowRatesVer", new object[] {
                        secret1}, this.serviceCallNowRatesVerOperationCompleted, userState);
        }
        
        private void OnserviceCallNowRatesVerOperationCompleted(object arg) {
            if ((this.serviceCallNowRatesVerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.serviceCallNowRatesVerCompleted(this, new serviceCallNowRatesVerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:RSIAction", RequestNamespace="urn:RSI", ResponseNamespace="urn:RSI")]
        [return: System.Xml.Serialization.SoapElementAttribute("servicePhonebookGetReturn")]
        public string servicePhonebookGet(string username, string password, string[] properties, string[] items) {
            object[] results = this.Invoke("servicePhonebookGet", new object[] {
                        username,
                        password,
                        properties,
                        items});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void servicePhonebookGetAsync(string username, string password, string[] properties, string[] items) {
            this.servicePhonebookGetAsync(username, password, properties, items, null);
        }
        
        /// <remarks/>
        public void servicePhonebookGetAsync(string username, string password, string[] properties, string[] items, object userState) {
            if ((this.servicePhonebookGetOperationCompleted == null)) {
                this.servicePhonebookGetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnservicePhonebookGetOperationCompleted);
            }
            this.InvokeAsync("servicePhonebookGet", new object[] {
                        username,
                        password,
                        properties,
                        items}, this.servicePhonebookGetOperationCompleted, userState);
        }
        
        private void OnservicePhonebookGetOperationCompleted(object arg) {
            if ((this.servicePhonebookGetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.servicePhonebookGetCompleted(this, new servicePhonebookGetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:RSIAction", RequestNamespace="urn:RSI", ResponseNamespace="urn:RSI")]
        [return: System.Xml.Serialization.SoapElementAttribute("servicePhonebookPutReturn")]
        public string servicePhonebookPut(string username, string password, string[] properties, string phonebook) {
            object[] results = this.Invoke("servicePhonebookPut", new object[] {
                        username,
                        password,
                        properties,
                        phonebook});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void servicePhonebookPutAsync(string username, string password, string[] properties, string phonebook) {
            this.servicePhonebookPutAsync(username, password, properties, phonebook, null);
        }
        
        /// <remarks/>
        public void servicePhonebookPutAsync(string username, string password, string[] properties, string phonebook, object userState) {
            if ((this.servicePhonebookPutOperationCompleted == null)) {
                this.servicePhonebookPutOperationCompleted = new System.Threading.SendOrPostCallback(this.OnservicePhonebookPutOperationCompleted);
            }
            this.InvokeAsync("servicePhonebookPut", new object[] {
                        username,
                        password,
                        properties,
                        phonebook}, this.servicePhonebookPutOperationCompleted, userState);
        }
        
        private void OnservicePhonebookPutOperationCompleted(object arg) {
            if ((this.servicePhonebookPutCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.servicePhonebookPutCompleted(this, new servicePhonebookPutCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:RSIAction", RequestNamespace="urn:RSI", ResponseNamespace="urn:RSI")]
        [return: System.Xml.Serialization.SoapElementAttribute("servicePrepaidAmountReturn")]
        public string servicePrepaidAmount(string username, string password) {
            object[] results = this.Invoke("servicePrepaidAmount", new object[] {
                        username,
                        password});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void servicePrepaidAmountAsync(string username, string password) {
            this.servicePrepaidAmountAsync(username, password, null);
        }
        
        /// <remarks/>
        public void servicePrepaidAmountAsync(string username, string password, object userState) {
            if ((this.servicePrepaidAmountOperationCompleted == null)) {
                this.servicePrepaidAmountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnservicePrepaidAmountOperationCompleted);
            }
            this.InvokeAsync("servicePrepaidAmount", new object[] {
                        username,
                        password}, this.servicePrepaidAmountOperationCompleted, userState);
        }
        
        private void OnservicePrepaidAmountOperationCompleted(object arg) {
            if ((this.servicePrepaidAmountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.servicePrepaidAmountCompleted(this, new servicePrepaidAmountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:RSIAction", RequestNamespace="urn:RSI", ResponseNamespace="urn:RSI")]
        [return: System.Xml.Serialization.SoapElementAttribute("utilsSearchUserReturn")]
        public string[] utilsSearchUser(string username, string password, string search) {
            object[] results = this.Invoke("utilsSearchUser", new object[] {
                        username,
                        password,
                        search});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void utilsSearchUserAsync(string username, string password, string search) {
            this.utilsSearchUserAsync(username, password, search, null);
        }
        
        /// <remarks/>
        public void utilsSearchUserAsync(string username, string password, string search, object userState) {
            if ((this.utilsSearchUserOperationCompleted == null)) {
                this.utilsSearchUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnutilsSearchUserOperationCompleted);
            }
            this.InvokeAsync("utilsSearchUser", new object[] {
                        username,
                        password,
                        search}, this.utilsSearchUserOperationCompleted, userState);
        }
        
        private void OnutilsSearchUserOperationCompleted(object arg) {
            if ((this.utilsSearchUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.utilsSearchUserCompleted(this, new utilsSearchUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="RSIBinding", Namespace="urn:RSI")]
    public partial class RSIService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback serviceBillingRecordsOperationCompleted;
        
        private System.Threading.SendOrPostCallback serviceCallNowOperationCompleted;
        
        private System.Threading.SendOrPostCallback serviceCallNowRatesOperationCompleted;
        
        private System.Threading.SendOrPostCallback serviceCallNowRatesVerOperationCompleted;
        
        private System.Threading.SendOrPostCallback servicePhonebookGetOperationCompleted;
        
        private System.Threading.SendOrPostCallback servicePhonebookPutOperationCompleted;
        
        private System.Threading.SendOrPostCallback servicePrepaidAmountOperationCompleted;
        
        private System.Threading.SendOrPostCallback utilsSearchUserOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public RSIService() {
            this.Url = "http://api.nikotel.com/soap/nikotel-2.0/";
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event serviceBillingRecordsCompletedEventHandler serviceBillingRecordsCompleted;
        
        /// <remarks/>
        public event serviceCallNowCompletedEventHandler serviceCallNowCompleted;
        
        /// <remarks/>
        public event serviceCallNowRatesCompletedEventHandler serviceCallNowRatesCompleted;
        
        /// <remarks/>
        public event serviceCallNowRatesVerCompletedEventHandler serviceCallNowRatesVerCompleted;
        
        /// <remarks/>
        public event servicePhonebookGetCompletedEventHandler servicePhonebookGetCompleted;
        
        /// <remarks/>
        public event servicePhonebookPutCompletedEventHandler servicePhonebookPutCompleted;
        
        /// <remarks/>
        public event servicePrepaidAmountCompletedEventHandler servicePrepaidAmountCompleted;
        
        /// <remarks/>
        public event utilsSearchUserCompletedEventHandler utilsSearchUserCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:RSIAction", RequestNamespace="urn:RSI", ResponseNamespace="urn:RSI")]
        [return: System.Xml.Serialization.SoapElementAttribute("serviceBillingRecordsReturn")]
        public string[] serviceBillingRecords(string username, string password, string timezone) {
            object[] results = this.Invoke("serviceBillingRecords", new object[] {
                        username,
                        password,
                        timezone});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void serviceBillingRecordsAsync(string username, string password, string timezone) {
            this.serviceBillingRecordsAsync(username, password, timezone, null);
        }
        
        /// <remarks/>
        public void serviceBillingRecordsAsync(string username, string password, string timezone, object userState) {
            if ((this.serviceBillingRecordsOperationCompleted == null)) {
                this.serviceBillingRecordsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnserviceBillingRecordsOperationCompleted);
            }
            this.InvokeAsync("serviceBillingRecords", new object[] {
                        username,
                        password,
                        timezone}, this.serviceBillingRecordsOperationCompleted, userState);
        }
        
        private void OnserviceBillingRecordsOperationCompleted(object arg) {
            if ((this.serviceBillingRecordsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.serviceBillingRecordsCompleted(this, new serviceBillingRecordsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:RSIAction", RequestNamespace="urn:RSI", ResponseNamespace="urn:RSI")]
        [return: System.Xml.Serialization.SoapElementAttribute("serviceCallNowReturn", DataType="integer")]
        public string serviceCallNow(string username, string password, string callfrom, string callto) {
            object[] results = this.Invoke("serviceCallNow", new object[] {
                        username,
                        password,
                        callfrom,
                        callto});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void serviceCallNowAsync(string username, string password, string callfrom, string callto) {
            this.serviceCallNowAsync(username, password, callfrom, callto, null);
        }
        
        /// <remarks/>
        public void serviceCallNowAsync(string username, string password, string callfrom, string callto, object userState) {
            if ((this.serviceCallNowOperationCompleted == null)) {
                this.serviceCallNowOperationCompleted = new System.Threading.SendOrPostCallback(this.OnserviceCallNowOperationCompleted);
            }
            this.InvokeAsync("serviceCallNow", new object[] {
                        username,
                        password,
                        callfrom,
                        callto}, this.serviceCallNowOperationCompleted, userState);
        }
        
        private void OnserviceCallNowOperationCompleted(object arg) {
            if ((this.serviceCallNowCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.serviceCallNowCompleted(this, new serviceCallNowCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:RSIAction", RequestNamespace="urn:RSI", ResponseNamespace="urn:RSI")]
        [return: System.Xml.Serialization.SoapElementAttribute("serviceCallNowRatesReturn")]
        public string[] serviceCallNowRates(string secret) {
            object[] results = this.Invoke("serviceCallNowRates", new object[] {
                        secret});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void serviceCallNowRatesAsync(string secret) {
            this.serviceCallNowRatesAsync(secret, null);
        }
        
        /// <remarks/>
        public void serviceCallNowRatesAsync(string secret, object userState) {
            if ((this.serviceCallNowRatesOperationCompleted == null)) {
                this.serviceCallNowRatesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnserviceCallNowRatesOperationCompleted);
            }
            this.InvokeAsync("serviceCallNowRates", new object[] {
                        secret}, this.serviceCallNowRatesOperationCompleted, userState);
        }
        
        private void OnserviceCallNowRatesOperationCompleted(object arg) {
            if ((this.serviceCallNowRatesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.serviceCallNowRatesCompleted(this, new serviceCallNowRatesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:RSIAction", RequestNamespace="urn:RSI", ResponseNamespace="urn:RSI")]
        [return: System.Xml.Serialization.SoapElementAttribute("serviceCallNowRatesVerReturn")]
        public string serviceCallNowRatesVer(string secret1) {
            object[] results = this.Invoke("serviceCallNowRatesVer", new object[] {
                        secret1});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void serviceCallNowRatesVerAsync(string secret1) {
            this.serviceCallNowRatesVerAsync(secret1, null);
        }
        
        /// <remarks/>
        public void serviceCallNowRatesVerAsync(string secret1, object userState) {
            if ((this.serviceCallNowRatesVerOperationCompleted == null)) {
                this.serviceCallNowRatesVerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnserviceCallNowRatesVerOperationCompleted);
            }
            this.InvokeAsync("serviceCallNowRatesVer", new object[] {
                        secret1}, this.serviceCallNowRatesVerOperationCompleted, userState);
        }
        
        private void OnserviceCallNowRatesVerOperationCompleted(object arg) {
            if ((this.serviceCallNowRatesVerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.serviceCallNowRatesVerCompleted(this, new serviceCallNowRatesVerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:RSIAction", RequestNamespace="urn:RSI", ResponseNamespace="urn:RSI")]
        [return: System.Xml.Serialization.SoapElementAttribute("servicePhonebookGetReturn")]
        public string servicePhonebookGet(string username, string password, string[] properties, string[] items) {
            object[] results = this.Invoke("servicePhonebookGet", new object[] {
                        username,
                        password,
                        properties,
                        items});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void servicePhonebookGetAsync(string username, string password, string[] properties, string[] items) {
            this.servicePhonebookGetAsync(username, password, properties, items, null);
        }
        
        /// <remarks/>
        public void servicePhonebookGetAsync(string username, string password, string[] properties, string[] items, object userState) {
            if ((this.servicePhonebookGetOperationCompleted == null)) {
                this.servicePhonebookGetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnservicePhonebookGetOperationCompleted);
            }
            this.InvokeAsync("servicePhonebookGet", new object[] {
                        username,
                        password,
                        properties,
                        items}, this.servicePhonebookGetOperationCompleted, userState);
        }
        
        private void OnservicePhonebookGetOperationCompleted(object arg) {
            if ((this.servicePhonebookGetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.servicePhonebookGetCompleted(this, new servicePhonebookGetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:RSIAction", RequestNamespace="urn:RSI", ResponseNamespace="urn:RSI")]
        [return: System.Xml.Serialization.SoapElementAttribute("servicePhonebookPutReturn")]
        public string servicePhonebookPut(string username, string password, string[] properties, string phonebook) {
            object[] results = this.Invoke("servicePhonebookPut", new object[] {
                        username,
                        password,
                        properties,
                        phonebook});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void servicePhonebookPutAsync(string username, string password, string[] properties, string phonebook) {
            this.servicePhonebookPutAsync(username, password, properties, phonebook, null);
        }
        
        /// <remarks/>
        public void servicePhonebookPutAsync(string username, string password, string[] properties, string phonebook, object userState) {
            if ((this.servicePhonebookPutOperationCompleted == null)) {
                this.servicePhonebookPutOperationCompleted = new System.Threading.SendOrPostCallback(this.OnservicePhonebookPutOperationCompleted);
            }
            this.InvokeAsync("servicePhonebookPut", new object[] {
                        username,
                        password,
                        properties,
                        phonebook}, this.servicePhonebookPutOperationCompleted, userState);
        }
        
        private void OnservicePhonebookPutOperationCompleted(object arg) {
            if ((this.servicePhonebookPutCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.servicePhonebookPutCompleted(this, new servicePhonebookPutCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:RSIAction", RequestNamespace="urn:RSI", ResponseNamespace="urn:RSI")]
        [return: System.Xml.Serialization.SoapElementAttribute("servicePrepaidAmountReturn")]
        public string servicePrepaidAmount(string username, string password) {
            object[] results = this.Invoke("servicePrepaidAmount", new object[] {
                        username,
                        password});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void servicePrepaidAmountAsync(string username, string password) {
            this.servicePrepaidAmountAsync(username, password, null);
        }
        
        /// <remarks/>
        public void servicePrepaidAmountAsync(string username, string password, object userState) {
            if ((this.servicePrepaidAmountOperationCompleted == null)) {
                this.servicePrepaidAmountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnservicePrepaidAmountOperationCompleted);
            }
            this.InvokeAsync("servicePrepaidAmount", new object[] {
                        username,
                        password}, this.servicePrepaidAmountOperationCompleted, userState);
        }
        
        private void OnservicePrepaidAmountOperationCompleted(object arg) {
            if ((this.servicePrepaidAmountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.servicePrepaidAmountCompleted(this, new servicePrepaidAmountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:RSIAction", RequestNamespace="urn:RSI", ResponseNamespace="urn:RSI")]
        [return: System.Xml.Serialization.SoapElementAttribute("utilsSearchUserReturn")]
        public string[] utilsSearchUser(string username, string password, string search) {
            object[] results = this.Invoke("utilsSearchUser", new object[] {
                        username,
                        password,
                        search});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void utilsSearchUserAsync(string username, string password, string search) {
            this.utilsSearchUserAsync(username, password, search, null);
        }
        
        /// <remarks/>
        public void utilsSearchUserAsync(string username, string password, string search, object userState) {
            if ((this.utilsSearchUserOperationCompleted == null)) {
                this.utilsSearchUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnutilsSearchUserOperationCompleted);
            }
            this.InvokeAsync("utilsSearchUser", new object[] {
                        username,
                        password,
                        search}, this.utilsSearchUserOperationCompleted, userState);
        }
        
        private void OnutilsSearchUserOperationCompleted(object arg) {
            if ((this.utilsSearchUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.utilsSearchUserCompleted(this, new utilsSearchUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void serviceBillingRecordsCompletedEventHandler(object sender, serviceBillingRecordsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class serviceBillingRecordsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal serviceBillingRecordsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void serviceCallNowCompletedEventHandler(object sender, serviceCallNowCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class serviceCallNowCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal serviceCallNowCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void serviceCallNowRatesCompletedEventHandler(object sender, serviceCallNowRatesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class serviceCallNowRatesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal serviceCallNowRatesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void serviceCallNowRatesVerCompletedEventHandler(object sender, serviceCallNowRatesVerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class serviceCallNowRatesVerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal serviceCallNowRatesVerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void servicePhonebookGetCompletedEventHandler(object sender, servicePhonebookGetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class servicePhonebookGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal servicePhonebookGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void servicePhonebookPutCompletedEventHandler(object sender, servicePhonebookPutCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class servicePhonebookPutCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal servicePhonebookPutCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void servicePrepaidAmountCompletedEventHandler(object sender, servicePrepaidAmountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class servicePrepaidAmountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal servicePrepaidAmountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void utilsSearchUserCompletedEventHandler(object sender, utilsSearchUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class utilsSearchUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal utilsSearchUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591